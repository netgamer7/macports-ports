diff --git a/shibsp/Application.cpp b/shibsp/Application.cpp
index c9f858e7..bc33bcab 100644
--- shibsp/Application.cpp
+++ shibsp/Application.cpp
@@ -109,15 +109,9 @@ string Application::getSecureHeader(const SPRequest& request, const char* name)
 void Application::clearAttributeHeaders(SPRequest& request) const
 {
     if (SPConfig::getConfig().isEnabled(SPConfig::OutOfProcess)) {
-        for_each(
-            m_unsetHeaders.begin(), m_unsetHeaders.end(),
-            boost::bind(
-                &SPRequest::clearHeader,
-                boost::ref(request),
-                boost::bind(&string::c_str, boost::bind(&pair<string,string>::first, _1)),
-                boost::bind(&string::c_str, boost::bind(&pair<string,string>::second, _1))
-                )
-            );
+        for (vector< pair<string,string> >::const_iterator i = m_unsetHeaders.begin(); i != m_unsetHeaders.end(); ++i) {
+            request.clearHeader(i->first.c_str(), i->second.c_str());
+        }
         return;
     }
 
@@ -148,15 +142,9 @@ void Application::clearAttributeHeaders(SPRequest& request) const
 
     // Now holding read lock.
     SharedLock unsetLock(m_lock, false);
-    for_each(
-        m_unsetHeaders.begin(), m_unsetHeaders.end(),
-        boost::bind(
-            &SPRequest::clearHeader,
-            boost::ref(request),
-            boost::bind(&string::c_str, boost::bind(&pair<string,string>::first, _1)),
-            boost::bind(&string::c_str, boost::bind(&pair<string,string>::second, _1))
-            )
-        );
+    for (vector< pair<string,string> >::const_iterator i = m_unsetHeaders.begin(); i != m_unsetHeaders.end(); ++i) {
+        request.clearHeader(i->first.c_str(), i->second.c_str());
+    }
 }
 
 void Application::limitRedirect(const GenericRequest& request, const char* url) const
-- 
2.20.1

